#!/bin/bash

# ------------------------------------------------------------------------------
# Script Name:    aws_sso_dynamic_default.sh
# Description:    Dynamically sets AWS default profile after SSO login, while clearing cached tokens to force fresh login.
# Usage:          ./aws_sso_dynamic_default.sh
# Author:         Copilot
# Date:           Today!
# Version:        Cache Clearing Integration
# ------------------------------------------------------------------------------

# Function to clear SSO token cache for the selected profile
clear_sso_cache() {
  echo "Clearing SSO cache for profile: $AWS_PROFILE..."
  cache_files=$(find ~/.aws/sso/cache/ -type f -exec grep -l "sso_start_url" {} +)
  
  if [[ -n "$cache_files" ]]; then
    echo "DEBUG: Removing cached files..."
    rm -rf ~/.aws/sso/cache/*
    echo "SSO cache cleared."
  else
    echo "No cached SSO tokens found for the selected profile."
  fi
}

# Function to retrieve the access token for the current profile
get_access_token() {
  echo "Retrieving access token for profile: $AWS_PROFILE..."
  token_file=$(find ~/.aws/sso/cache/ -type f -exec grep -l "sso_start_url" {} +)

  if [[ -z "$token_file" ]]; then
    echo "ERROR: No valid session token found. Please log in again using 'aws sso login'."
    exit 1
  fi

  echo "DEBUG: Token file located: $token_file"
  access_token=$(jq -r '.accessToken' "$token_file")

  if [[ -z "$access_token" ]]; then
    echo "ERROR: Failed to retrieve the access token from $token_file."
    exit 1
  fi

  echo "DEBUG: Access token retrieved successfully."
}

# Function to dynamically list and select accounts
select_account() {
  echo "Fetching available accounts..."
  accounts=$(aws sso list-accounts --access-token "$access_token" --region "eu-west-2" --query "accountList[*].{ID:accountId,Name:accountName}" --output json)

  if [[ -z "$accounts" || "$accounts" == "[]" ]]; then
    echo "ERROR: No accounts found for the selected profile."
    exit 1
  fi

  # Display account options for user selection
  echo "Available accounts:"
  mapfile -t account_ids < <(echo "$accounts" | jq -r '.[].ID')
  mapfile -t account_names < <(echo "$accounts" | jq -r '.[].Name')

  for i in "${!account_ids[@]}"; do
    echo "$((i + 1))) ${account_names[i]} (${account_ids[i]})"
  done

  read -rp "Select an account by number: " account_choice
  selected_account_id="${account_ids[$((account_choice - 1))]}"

  if [[ -z "$selected_account_id" ]]; then
    echo "ERROR: Invalid selection. Exiting."
    exit 1
  fi

  echo "You selected account: $selected_account_id (${account_names[$((account_choice - 1))]})"
}

# Function to dynamically list and select roles for the selected account
select_role() {
  echo "Fetching available roles for account ID $selected_account_id..."
  roles=$(aws sso list-account-roles --access-token "$access_token" --region "eu-west-2" --account-id "$selected_account_id" --query "roleList[*].roleName" --output json)

  if [[ -z "$roles" || "$roles" == "[]" ]]; then
    echo "ERROR: No roles found for the selected account."
    exit 1
  fi

  # Display roles for user selection
  echo "Available roles:"
  mapfile -t role_names < <(echo "$roles" | jq -r '.[]')

  for i in "${!role_names[@]}"; do
    echo "$((i + 1))) ${role_names[i]}"
  done

  read -rp "Select a role by number: " role_choice
  selected_role_name="${role_names[$((role_choice - 1))]}"

  if [[ -z "$selected_role_name" ]]; then
    echo "ERROR: Invalid selection. Exiting."
    exit 1
  fi

  echo "You selected role: $selected_role_name"
}

# Function to set credentials to the default profile
use_selected_account_role() {
  echo "Fetching credentials for account $selected_account_id and role $selected_role_name..."
  credentials=$(aws sso get-role-credentials --access-token "$access_token" --region "eu-west-2" --account-id "$selected_account_id" --role-name "$selected_role_name" --output json)

  if [[ -z "$credentials" ]]; then
    echo "ERROR: Failed to retrieve credentials for account $selected_account_id and role $selected_role_name."
    exit 1
  fi

  # Extract credentials
  access_key_id=$(echo "$credentials" | jq -r '.roleCredentials.accessKeyId')
  secret_access_key=$(echo "$credentials" | jq -r '.roleCredentials.secretAccessKey')
  session_token=$(echo "$credentials" | jq -r '.roleCredentials.sessionToken')

  # Save credentials to the default profile
  aws configure set aws_access_key_id "$access_key_id" --profile default
  aws configure set aws_secret_access_key "$secret_access_key" --profile default
  aws configure set aws_session_token "$session_token" --profile default
  aws configure set region "eu-west-2" --profile default

  echo "Temporary credentials set as the default profile. You can now run AWS CLI commands without specifying '--profile'."
}

# Main function
main() {
  echo "Listing available AWS profiles..."
  select AWS_PROFILE in $(aws configure list-profiles | grep -v '^default$'); do
    if [[ -n "$AWS_PROFILE" ]]; then
      echo "You selected AWS profile: $AWS_PROFILE"
      break
    else
      echo "ERROR: Invalid selection. Please try again."
    fi
  done

  # Clear SSO cache and force fresh login
  clear_sso_cache
  aws sso login --profile "$AWS_PROFILE"

  # Proceed with the workflow
  get_access_token
  select_account
  select_role
  use_selected_account_role
}

# Execute the main function
main

