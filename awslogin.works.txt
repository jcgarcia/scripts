#!/bin/bash

# ------------------------------------------------------------------------------
# Script Name:    aws_sso_token_login.sh
# Description:    Reads AWS SSO token from cache, dynamically selects accounts and roles, and applies temporary credentials.
# Usage:          ./aws_sso_token_login.sh
# Author:         Copilot
# Date:           Today!
# Version:        Final Debug-Enhanced Version
# ------------------------------------------------------------------------------

# Function to retrieve the access token for the current profile
get_access_token() {
  echo "Retrieving access token for profile: $AWS_PROFILE..."
  
  # List all cache files and inspect their contents
  echo "DEBUG: Listing cache files in ~/.aws/sso/cache/"
  ls ~/.aws/sso/cache/

  # Locate the cache file associated with the profile's SSO session
  token_file=$(grep -rl "https://ingasti.awsapps.com/start/" ~/.aws/sso/cache/)
  
  if [[ -z "$token_file" ]]; then
    echo "ERROR: No valid session token found. Please ensure 'aws sso login' has completed successfully."
    exit 1
  fi

  echo "DEBUG: Token file located: $token_file"
  
  # Extract the access token
  access_token=$(jq -r '.accessToken' "$token_file")
  if [[ -z "$access_token" ]]; then
    echo "ERROR: Failed to retrieve the access token from $token_file."
    exit 1
  fi

  echo "DEBUG: Access token retrieved successfully."
}

# Function to dynamically list and select accounts
select_account() {
  echo "Fetching available accounts..."
  accounts=$(aws sso list-accounts --access-token "$access_token" --region "eu-west-2" --query "accountList[*].{ID:accountId,Name:accountName}" --output json)

  if [[ -z "$accounts" || "$accounts" == "[]" ]]; then
    echo "ERROR: No accounts found for the selected profile."
    exit 1
  fi

  # Display account options for user selection
  echo "Available accounts:"
  mapfile -t account_ids < <(echo "$accounts" | jq -r '.[].ID')
  mapfile -t account_names < <(echo "$accounts" | jq -r '.[].Name')

  for i in "${!account_ids[@]}"; do
    echo "$((i + 1))) ${account_names[i]} (${account_ids[i]})"
  done

  read -rp "Select an account by number: " account_choice
  selected_account_id="${account_ids[$((account_choice - 1))]}"

  if [[ -z "$selected_account_id" ]]; then
    echo "ERROR: Invalid selection. Exiting."
    exit 1
  fi

  echo "You selected account: $selected_account_id (${account_names[$((account_choice - 1))]})"
}

# Function to dynamically list and select roles for the selected account
select_role() {
  echo "Fetching available roles for account ID $selected_account_id..."
  roles=$(aws sso list-account-roles --access-token "$access_token" --region "eu-west-2" --account-id "$selected_account_id" --query "roleList[*].roleName" --output json)

  if [[ -z "$roles" || "$roles" == "[]" ]]; then
    echo "ERROR: No roles found for the selected account."
    exit 1
  fi

  # Display roles for user selection
  echo "Available roles:"
  mapfile -t role_names < <(echo "$roles" | jq -r '.[]')

  for i in "${!role_names[@]}"; do
    echo "$((i + 1))) ${role_names[i]}"
  done

  read -rp "Select a role by number: " role_choice
  selected_role_name="${role_names[$((role_choice - 1))]}"

  if [[ -z "$selected_role_name" ]]; then
    echo "ERROR: Invalid selection. Exiting."
    exit 1
  fi

  echo "You selected role: $selected_role_name"
}

# Function to fetch credentials for the selected account and role

use_selected_account_role() {
  echo "Fetching credentials for account $selected_account_id and role $selected_role_name..."
  credentials=$(aws sso get-role-credentials --access-token "$access_token" --region "eu-west-2" --account-id "$selected_account_id" --role-name "$selected_role_name" --output json)

  if [[ -z "$credentials" ]]; then
    echo "ERROR: Failed to retrieve credentials for account $selected_account_id and role $selected_role_name."
    exit 1
  fi

  # Extract credentials
  access_key_id=$(echo "$credentials" | jq -r '.roleCredentials.accessKeyId')
  secret_access_key=$(echo "$credentials" | jq -r '.roleCredentials.secretAccessKey')
  session_token=$(echo "$credentials" | jq -r '.roleCredentials.sessionToken')

  # Save credentials to a temporary profile
  aws configure set aws_access_key_id "$access_key_id" --profile temp-aws-session
  aws configure set aws_secret_access_key "$secret_access_key" --profile temp-aws-session
  aws configure set aws_session_token "$session_token" --profile temp-aws-session
  aws configure set region "eu-west-2" --profile temp-aws-session

  echo "Temporary credentials saved to profile 'temp-aws-session'."
  echo "Use this profile for AWS CLI commands: aws <command> --profile temp-aws-session"
}


# Main function
main() {
  echo "Listing available AWS profiles..."
  select AWS_PROFILE in $(aws configure list-profiles); do
    if [[ -n "$AWS_PROFILE" ]]; then
      echo "You selected AWS profile: $AWS_PROFILE"
      break
    else
      echo "ERROR: Invalid selection. Please try again."
    fi
  done

  # Perform login and token retrieval
  aws sso login --profile "$AWS_PROFILE"
  get_access_token
  select_account
  select_role
  use_selected_account_role
}

# Execute the main function
main

